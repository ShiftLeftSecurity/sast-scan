{
  "comment": "UserControlled, Test, Demo sources are predefined. Same for Demo, Test and RemoteCodeExecution sinks",
  "sources": [
    {
      "name": "Cookies",
      "comment": "used to annotate cookie sources"
    },
    {
      "name": "UserSecrets",
      "comment": "use to annotate passwords, tokens, etc."
    },
    {
      "name": "UserData",
      "comment": "use to annotate user data"
    },
    {
      "name": "UserControlled",
      "comment": "use to annotate all data that is controllable by the user making a request"
    },
    {
      "name": "UserControlled_Payload",
      "comment": "use to annotate data that is an entire payload from user requests (eg. GET/POST payloads)"
    },
    {
      "name": "UserControlled_Parameter",
      "comment": "use to annotate data that an individual parametr from user requests (eg. a single URL param)"
    },
    {
      "name": "UserControlled_Meta",
      "comment": "use to annotate metadata that comes with a user's request, but is not explicitly part of the payload (headers, cookies, etc)"
    },
    {
      "name": "ServerSecrets",
      "comment": "use to annotate signing keys, access tokens, and other server secrets"
    },
    {
      "name": "HeaderData",
      "comment": "use to annotate headers, which may contain data that should be treated carefully"
    },
    {
      "name": "URL",
      "comment": "use to annotate whole or partial URLs"
    },
    {
      "name": "MemCache",
      "comment": "used to annotate locations of MemCache"
    },
    {
      "name": "DataFromGET",
      "comment": "Used to annotate data that comes from a GET request."
    },
    {
      "name": "MaybeDataFromGET",
      "comment": "Used to annotate data that may or may not come from a GET request."
    }
  ],
  "sinks": [
    {
      "name": "FileSystem",
      "comment": "use to annotate where data flows into file system"
    },
    {
      "name": "Exfiltration",
      "comment": "use to annotate where data flows out of the file system"
    },
    {
      "name": "GetAttr",
      "comment": "used to annotate `getattr` function"
    },
    {
      "name": "Logging",
      "comment": "use to annotate where data is logged"
    },
    {
      "name": "Redirect",
      "comment": "use to annotate where data influences a redirect sent to the user"
    },
    {
      "name": "RemoteCodeExecution",
      "comment": "use to annotate where inputs can lead to code execution"
    },
    {
      "name": "RequestSend",
      "comment": "use to annotate where data influences request sending"
    },
    {
      "name": "ReturnedToUser",
      "comment": "use to annotate locations where data is returned to users"
    },
    {
      "name": "ResponseHeaderName",
      "comment": "use to annotate locations where header names are set on responses"
    },
    {
      "name": "ResponseHeaderValue",
      "comment": "use to annotate locations where header values are set on responses"
    },
    {
      "name": "SQL",
      "comment": "use to annotate places of SQL injection risk"
    },
    {
      "name": "XMLParser",
      "comment": "use to annotate where data is parsed for XML"
    },
    {
      "name": "XSS",
      "comment": "use to annotate where data can cause XSS"
    },
    {
      "name": "MemcacheSink",
      "comment": "used to annotate locations of MemCache"
    },
    {
      "name": "DataStorage",
      "comment": "used to annotate locations where data enters a persistent data store"
    },
    {
      "name": "ServerSideTemplateInjection",
      "comment": "used to annotate locations of Server Side Template Injection risk"
    }
  ],
  "features": [
    {
      "name": "string_concat_lhs",
      "comment": "via a string created by tainted_str + 's'"
    },
    {
      "name": "string_concat_rhs",
      "comment": "via a string created by 's' + tainted_str"
    },
    {
      "name": "getattr",
      "comment": "via getattr first parameter"
    },
    {
      "name": "request_files",
      "comment": "via django request.FILES"
    },
    {
      "name": "bytesio",
      "comment": "via io.BytesIO object"
    },
    {
      "name": "furl_query_params",
      "comment": "Indicates taint passed through furl.furl as a query param"
    },
    {
      "name": "furl_path",
      "comment": "Indicates taint passed through furl.furl as a path"
    },
    {
      "name": "furl_fragment",
      "comment": "Indicates taint passed through furl.furl as a fragment"
    },
    {
      "name": "furl_scheme",
      "comment": "Indicates taint passed through furl.furl as a scheme"
    },
    {
      "name": "furl_host",
      "comment": "Indicates taint passed through furl.furl as a host"
    },
    {
      "name": "furl_port",
      "comment": "Indicates taint passed through furl.furl as a port"
    },
    {
      "name": "furl_netloc",
      "comment": "Indicates taint passed through furl.furl as a network location"
    },
    {
      "name": "furl_origin",
      "comment": "Indicates taint passed through furl.furl as an origin"
    },
    {
      "name": "furl_url",
      "comment": "Indicates taint passed through furl.furl as a url"
    },
    {
      "name": "urllib_quote_plus",
      "comment": "Indicates a taint passed through the 'urllib.quote_plus' function"
    },
    {
      "name": "escape_html",
      "comment": "Indicates a taint passed through a function that escapes data for embedding in HTML documents"
    },
    {
      "name": "hmac_key",
      "comment": "Indicates taint passed through the HMAC algorithm as a key."
    },
    {
      "name": "boolean",
      "comment": "Indicates flow passed through conversion to 'bool'."
    },
    {
      "name": "requests_metadata",
      "comment": "Indicates a flow going to requests APIs kwargs (body, query_string), usually is not SSRF. It is a code smell"
    },
    {
      "name": "code_smell",
      "comment": "Indicates that the flow is usually code smell and does not have a direct security or privacy impact"
    },
    {
      "name": "command_line_args",
      "comment": "Indicates when an RCE injection is going through the args and not the actual binary"
    },
    {
      "name": "external_query",
      "comment": "Indicates that this flow passed through some external query (GraphQL, Database, etc.), and thus might not reflect the original tainted data anymore"
    },
    {
      "name": "django_model_query",
      "comment": "Indicates that this flow passed through a query of a Django Model object, and thus might not reflect the original tainted data anymore"
    },
    {
      "name": "benign",
      "comment": "Indicates that data was transformed in some way that likely renders it benign (conversion to bool, length take, uncontrollable attributes like __name__ accessed)"
    },
    {
      "name": "type",
      "comment": "Indicates that data in this flow passed through a type constructor"
    },
    {
      "name": "len",
      "comment": "Indicates taint passed through the 'len()' built-in function"
    }
  ],
  "rules": [
    {
      "name": "Remote Code Execution",
      "code": "CWE-94",
      "severity": "CRITICAL",
      "owasp_category": "a1-injection",
      "sources": [
        "UserControlled",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta",
        "Framework_Parameter"
      ],
      "sinks": [
        "RemoteCodeExecution"
      ],
      "message_format": "Remote Code Execution via shell with user controlled data from the source `{$sources}` used for constructing the command at sink `{$sinks}`."
    },
    {
      "name": "SQL injection",
      "code": "CWE-89",
      "severity": "CRITICAL",
      "owasp_category": "a1-injection",
      "sources": [
        "UserControlled",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta",
        "Framework_Parameter"
      ],
      "sinks": [
        "SQL"
      ],
      "message_format": "SQL injection with user controlled data from the source `{$sources}` used to construct the query at sink `{$sinks}`."
    },
    {
      "name": "XML Injection",
      "code": "CWE-91",
      "severity": "HIGH",
      "owasp_category": "a1-injection",
      "sources": [
        "UserControlled",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta",
        "Framework_Parameter"
      ],
      "sinks": [
        "XMLParser"
      ],
      "message_format": "XML injection with user controlled data from the source `{$sources}` is used for parsing XML at the sink `{$sinks}`."
    },
    {
      "name": "XSS",
      "code": "CWE-79",
      "severity": "HIGH",
      "owasp_category": "a7-xss",
      "sources": [
        "UserControlled",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta"
      ],
      "sinks": [
        "XSS",
        "ReturnedToUser"
      ],
      "message_format": "Cross-site scripting (XSS) vulnerability with data reaching from the source `{$sources}` to the sink `{$sinks}` without sanitization."
    },
    {
      "name": "Potential XSS",
      "code": "CWE-80",
      "severity": "MEDIUM",
      "owasp_category": "a7-xss",
      "sources": [
        "Framework_Parameter"
      ],
      "sinks": [
        "XSS",
        "ReturnedToUser"
      ],
      "message_format": "Possibility for Cross-site scripting (XSS) when the http data at source `{$sources}` is returned to the user via `{$sinks}` without sanitization."
    },
    {
      "name": "User data to getattr",
      "code": "CWE-284",
      "severity": "MEDIUM",
      "owasp_category": "a5-broken-access-control",
      "sources": [
        "UserControlled",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta",
        "Framework_Parameter"
      ],
      "sinks": [
        "GetAttr"
      ],
      "message_format": "Attacker may control at least one argument to getattr(,)."
    },
    {
      "name": "File Write",
      "code": "CWE-732",
      "severity": "CRITICAL",
      "owasp_category": "a5-broken-access-control",
      "sources": [
        "UserControlled",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta",
        "Framework_Parameter"
      ],
      "sinks": [
        "FileSystem"
      ],
      "message_format": "User controlled data from the source `{$sources}` is used in the sink `{$sinks}` for file operations."
    },
    {
      "name": "Directory Traversal",
      "code": "CWE-22",
      "severity": "CRITICAL",
      "owasp_category": "a5-broken-access-control",
      "sources": [
        "UserControlled",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta",
        "Framework_Parameter"
      ],
      "sinks": [
        "Exfiltration"
      ],
      "message_format": "Exfiltration of data (Path Traversal) due to user controlled data from source `{$sources}` influencing file operations in the sink `{$sinks}`"
    },
    {
      "name": "Server-side Request Forgery (SSRF)",
      "code": "CWE-918",
      "severity": "HIGH",
      "owasp_category": "a6-misconfiguration",
      "sources": [
        "UserControlled",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta",
        "Framework_Parameter"
      ],
      "sinks": [
        "RequestSend"
      ],
      "message_format": "Server-side request forgery (SSRF) possible with data from the source `{$sources}` reaching the sink `{$sinks}`."
    },
    {
      "name": "Open Redirect",
      "code": "CWE-601",
      "severity": "HIGH",
      "owasp_category": "a6-misconfiguration",
      "sources": [
        "UserControlled",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta",
        "Framework_Parameter"
      ],
      "sinks": [
        "Redirect"
      ],
      "message_format": "Data from the source `{$sources}` may be used in an open redirect via the sink `{$sinks}`."
    },
    {
      "name": "Sensitive Data Leak",
      "code": "CWE-319",
      "severity": "HIGH",
      "owasp_category": "a3-sensitive-data-exposure",
      "sources": [
        "ServerSecrets"
      ],
      "sinks": [
        "ReturnedToUser"
      ],
      "message_format": "Server secrets such as keys and access tokens are being returned to users."
    },
    {
      "name": "User controlled response headers",
      "code": "CWE-644",
      "severity": "MEDIUM",
      "owasp_category": "a6-misconfiguration",
      "sources": [
        "UserControlled",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta",
        "Framework_Parameter"
      ],
      "sinks": [
        "ResponseHeaderName",
        "ResponseHeaderValue"
      ],
      "message_format": "User controlled data is used to set http headers on a response."
    },
    {
      "name": "Sensitive Data Leak",
      "code": "CWE-117",
      "severity": "MEDIUM",
      "owasp_category": "a3-sensitive-data-exposure",
      "sources": [
        "Cookies",
        "UserControlled",
        "UserData",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta",
        "Framework_Parameter"
      ],
      "sinks": [
        "Logging"
      ],
      "message_format": "Sensitive data leak with data from the source `{$sources}` being leaked to log at `{$sinks}`."
    },
    {
      "name": "Server Side Template Injection",
      "code": "CWE-94",
      "severity": "HIGH",
      "owasp_category": "a1-injection",
      "sources": [
        "UserControlled",
        "UserControlled_Payload",
        "UserControlled_Parameter",
        "UserControlled_Meta",
        "Framework_Parameter"
      ],
      "sinks": [
        "ServerSideTemplateInjection"
      ],
      "message_format": "User controlled data may eventually flow into a Server Side Template Injection sink."
    }
  ]
}
