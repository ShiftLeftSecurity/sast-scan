trigger:
  tags:
    include:
    - v*
  branches:
    include:
    - master
    - feature/*
    - fix/*
pool:
  vmImage: 'ubuntu-20.04'
variables:
  tag: '$(Build.SourceBranchName)'

stages:
- stage: Builders
  displayName: Build and Release scan images
  jobs:
  - job: Build
    displayName: Docker Build and Push - default
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: sl_docker
    - task: CmdLine@2
      displayName: Setup buildx
      inputs:
        script: |
          docker buildx ls
          docker buildx rm build
          docker run --rm --privileged docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64
          docker buildx create --use --name build --node build --driver-opt network=host
          docker buildx inspect build --bootstrap
          docker buildx use build
    - task: CmdLine@2
      displayName: Release multi arch build
      inputs:
        script: |
          docker buildx build --platform linux/arm64,linux/amd64 -t shiftleft/scan -t shiftleft/sast-scan --push .
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: CmdLine@2
      displayName: Multi arch build
      inputs:
        script: |
          docker buildx build --platform linux/arm64 -t shiftleft/scan:arm -t shiftleft/sast-scan:arm --push .
          docker buildx build --platform linux/amd64 -t shiftleft/scan:$(tag) -t shiftleft/sast-scan:$(tag) --push .
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: quay_sl
    - task: Docker@2
      displayName: Build base image (mirror)
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        repository: shiftleft/scan
        addPipelineData: false
        tags: |
          $(tag)
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: Docker@2
      displayName: Release base image (mirror)
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        repository: shiftleft/scan
        addPipelineData: false
        tags: |
          latest
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - job: Build_slim
    displayName: Docker Build and Push - slim
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: sl_docker
    - task: CmdLine@2
      displayName: Setup buildx
      inputs:
        script: |
          docker buildx ls
          docker buildx rm build
          docker run --rm --privileged docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64
          docker buildx create --use --name build --node build --driver-opt network=host
          docker buildx inspect build --bootstrap
          docker buildx use build
    - task: CmdLine@2
      displayName: Release multi arch build
      inputs:
        script: |
          docker buildx build --platform linux/arm64,linux/amd64 -t shiftleft/scan-slim -f $(Build.SourcesDirectory)/ci/Dockerfile-dynamic-lang --push .
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: CmdLine@2
      displayName: Multi arch build
      inputs:
        script: |
          docker buildx build --platform linux/arm64 -t shiftleft/scan-slim:$(tag) -f $(Build.SourcesDirectory)/ci/Dockerfile-dynamic-lang --push .
          docker buildx build --platform linux/amd64 -t shiftleft/scan-slim:$(tag) -f $(Build.SourcesDirectory)/ci/Dockerfile-dynamic-lang --push .
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

  - job: Build_oss
    displayName: Docker Build and Push - oss
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: sl_docker
    - task: Docker@2
      displayName: Build oss image
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/ci/Dockerfile-oss'
        repository: shiftleft/scan-oss
        addPipelineData: false
        buildContext: $(Build.SourcesDirectory)
        tags: |
          $(tag)
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: Docker@2
      displayName: Release oss image
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/ci/Dockerfile-oss'
        repository: shiftleft/scan-oss
        addPipelineData: false
        buildContext: $(Build.SourcesDirectory)
        tags: |
          latest
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: quay_sl
    - task: Docker@2
      displayName: Build oss image (mirror)
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/ci/Dockerfile-oss'
        repository: shiftleft/scan-oss
        addPipelineData: false
        buildContext: $(Build.SourcesDirectory)
        tags: |
          $(tag)
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: Docker@2
      displayName: Release oss image (mirror)
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/ci/Dockerfile-oss'
        repository: shiftleft/scan-oss
        addPipelineData: false
        buildContext: $(Build.SourcesDirectory)
        tags: |
          latest
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - job: Build_java
    displayName: Docker Build and Push - Java
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: sl_docker
    - task: Docker@2
      displayName: Build java image
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/ci/Dockerfile-java'
        repository: shiftleft/scan-java
        addPipelineData: false
        buildContext: $(Build.SourcesDirectory)
        tags: |
          $(tag)
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: Docker@2
      displayName: Release java image
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/ci/Dockerfile-java'
        repository: shiftleft/scan-java
        addPipelineData: false
        buildContext: $(Build.SourcesDirectory)
        tags: |
          latest
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: quay_sl
    - task: Docker@2
      displayName: Build java image (mirror)
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/ci/Dockerfile-java'
        repository: shiftleft/scan-java
        addPipelineData: false
        buildContext: $(Build.SourcesDirectory)
        tags: |
          $(tag)
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: Docker@2
      displayName: Release java image (mirror)
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/ci/Dockerfile-java'
        repository: shiftleft/scan-java
        addPipelineData: false
        buildContext: $(Build.SourcesDirectory)
        tags: |
          latest
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - job: Build_csharp
    displayName: Docker Build and Push - Csharp
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: sl_docker
    - task: Docker@2
      displayName: Build csharp image
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/ci/Dockerfile-csharp'
        repository: shiftleft/scan-csharp
        addPipelineData: false
        buildContext: $(Build.SourcesDirectory)
        tags: |
          $(tag)
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    - task: Docker@2
      displayName: Build csharp image
      inputs:
        command: 'buildAndPush'
        dockerfile: '$(Build.SourcesDirectory)/ci/Dockerfile-csharp'
        repository: shiftleft/scan-csharp
        addPipelineData: false
        buildContext: $(Build.SourcesDirectory)
        tags: |
          latest
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
