#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This file is part of Scan.

# Scan is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Scan is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Scan.  If not, see <https://www.gnu.org/licenses/>.

"""
Multi-language static analysis scanner
"""
import argparse
import logging
import os
import sys
import tempfile
import uuid

import lib.analysis as analysis
import lib.config as config
import lib.convert as convertLib
import lib.context as context
import lib.utils as utils
from lib.executor import exec_tool, execute_default_cmd
from lib.telemetry import track

logging.basicConfig(
    level=logging.INFO, format="%(levelname)s [%(asctime)s] %(message)s"
)
LOG = logging.getLogger(__name__)

product_logo = """
███████╗██╗  ██╗██╗███████╗████████╗██╗     ███████╗███████╗████████╗    ███████╗ ██████╗ █████╗ ███╗   ██╗
██╔════╝██║  ██║██║██╔════╝╚══██╔══╝██║     ██╔════╝██╔════╝╚══██╔══╝    ██╔════╝██╔════╝██╔══██╗████╗  ██║
███████╗███████║██║█████╗     ██║   ██║     █████╗  █████╗     ██║       ███████╗██║     ███████║██╔██╗ ██║
╚════██║██╔══██║██║██╔══╝     ██║   ██║     ██╔══╝  ██╔══╝     ██║       ╚════██║██║     ██╔══██║██║╚██╗██║
███████║██║  ██║██║██║        ██║   ███████╗███████╗██║        ██║       ███████║╚██████╗██║  ██║██║ ╚████║
╚══════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝   ╚══════╝╚══════╝╚═╝        ╚═╝       ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝
"""


def build_args():
    """
    Constructs command line arguments for the scanner
    """
    parser = argparse.ArgumentParser(
        description="Wrapper for various static analysis tools"
    )
    parser.add_argument("--src", dest="src_dir", help="Source directory")
    parser.add_argument("--out_dir", dest="reports_dir", help="Reports directory")
    parser.add_argument(
        "--type",
        dest="scan_type",
        help="Override project type if auto-detection is incorrect. Comma separated values for multiple types. Eg: python,bash,credscan",
    )
    parser.add_argument(
        "--convert",
        action="store_true",
        default=True,
        dest="convert",
        help="Convert results to sarif json format",
    )
    parser.add_argument(
        "--no-error",
        action="store_true",
        default=False,
        dest="noerror",
        help="Continue on error to prevent build from breaking",
    )
    parser.add_argument(
        "--mode",
        default="ci",
        dest="scan_mode",
        help="Scan mode to use ci, ide, pr, release, deploy",
    )
    return parser.parse_args()


def scan(type_list, src, reports_dir, convert, scan_mode):
    """
    Method to initiate scan of the codebase

    Args:
      type_list List of project type
      src Project dir
      reports_dir Directory for output reports
      convert Boolean to enable normalisation of reports json
      scan_mode Scan mode string
    """
    for type_str in type_list:
        # Find if there is any scan mode specific config
        cmd_map_list = config.get("scan_tools_args_map").get(type_str + "-" + scan_mode)
        if not cmd_map_list:
            cmd_map_list = config.get("scan_tools_args_map").get(type_str)
        if cmd_map_list:
            # Default command list can be in the form of a list or dict
            if isinstance(cmd_map_list, list):
                execute_default_cmd(
                    cmd_map_list,
                    type_str,
                    type_str,
                    src,
                    reports_dir,
                    convert,
                    scan_mode,
                )
            elif isinstance(cmd_map_list, dict):
                for cmd_key, cmd_val in cmd_map_list.items():
                    execute_default_cmd(
                        cmd_val,
                        type_str,
                        cmd_key,
                        src,
                        reports_dir,
                        convert,
                        scan_mode,
                    )
        else:
            # Look for any _scan function in this module for execution
            try:
                getattr(sys.modules[__name__], "%s_scan" % type_str)(
                    src, reports_dir, convert
                )
            except Exception as e:
                LOG.warning(
                    "Scan using the {} plugin did not produce valid result".format(
                        type_str
                    )
                )


def python_scan(src, reports_dir, convert):
    """
    Method to initiate scan of the python codebase

    Args:
      src Project dir
      reports_dir Directory for output reports
      convert Boolean to enable normalisation of reports json
    """
    bandit_scan(src, reports_dir, convert)


def bandit_scan(src, reports_dir, convert):
    """
    Method to initiate bandit scan of the python codebase

    Args:
      src Project dir
      reports_dir Directory for output reports
      convert Boolean to enable normalisation of reports json
    """
    convert_args = []
    report_fname = utils.get_report_file(
        "source", reports_dir, convert, ext_name="json"
    )
    if reports_dir or convert:
        convert_args = [
            "-o",
            report_fname,
            "-f",
            "json",
        ]
    bandit_cmd = "bandit"
    bandit_args = [
        bandit_cmd,
        "-r",
        "-a",
        "vuln",
        "-ii",
        "-ll",
        *convert_args,
        "-x",
        ",".join(config.get("ignore_directories")),
        src,
    ]
    exec_tool(bandit_args)
    if convert:
        crep_fname = utils.get_report_file(
            "source", reports_dir, convert, ext_name="sarif"
        )
        convertLib.convert_file(
            "source", bandit_args[1:], src, report_fname, crep_fname,
        )


def java_scan(src, reports_dir, convert):
    """
    Method to initiate scan of the java codebase

    Args:
      src Project dir
      reports_dir Directory for output reports
      convert Boolean to enable normalisation of reports json
    """
    findsecbugs_scan(src, reports_dir, convert)
    pmd_scan(src, reports_dir, convert)


def pmd_scan(src, reports_dir, convert):
    """
    Method to initiate pmd scan of the java codebase
    Args:
      src Project dir
      reports_dir Directory for output reports
      convert Boolean to enable normalisation of reports json
    """
    convert_args = []
    report_fname = utils.get_report_file("source", reports_dir, convert, ext_name="csv")
    if reports_dir or convert:
        convert_args = ["-r", report_fname, "-f", "csv"]
    pmd_cmd = os.environ["PMD_CMD"].split(" ")
    pmd_args = [
        *pmd_cmd,
        "-no-cache",
        "--failOnViolation",
        "false",
        "-language",
        "java",
        "-version",
        "11",
        "-d",
        src,
        *convert_args,
        "-R",
        os.environ["APP_SRC_DIR"] + "/rules-pmd.xml",
    ]
    exec_tool(pmd_args, src)
    if convert:
        crep_fname = utils.get_report_file(
            "source", reports_dir, convert, ext_name="sarif"
        )
        convertLib.convert_file(
            "source", pmd_args[1:], src, report_fname, crep_fname,
        )


def findsecbugs_scan(src, reports_dir, convert):
    """
    Method to initiate findsecbugs scan of the java codebase

    Args:
      src Project dir
      reports_dir Directory for output reports
      convert Boolean to enable normalisation of reports json
    """
    report_fname = utils.get_report_file("class", reports_dir, convert, ext_name="xml")
    findsec_cmd = [
        "java",
        "-jar",
        os.environ["SPOTBUGS_HOME"] + "/lib/spotbugs.jar",
    ]
    jar_files = utils.find_jar_files()
    with tempfile.NamedTemporaryFile(mode="w") as fp:
        fp.writelines([str(x) + "\n" for x in jar_files])
        jars_list = fp.name
        findsec_args = [
            *findsec_cmd,
            "-textui",
            "-include",
            os.environ["APP_SRC_DIR"] + "/spotbugs/include.xml",
            "-exclude",
            os.environ["APP_SRC_DIR"] + "/spotbugs/exclude.xml",
            "-noClassOk",
            "-auxclasspathFromFile",
            jars_list,
            "-sourcepath",
            src,
            "-quiet",
            "-medium",
            "-xml:withMessages",
            "-effort:max",
            "-nested:false",
            "-output",
            report_fname,
            src,
        ]
        exec_tool(findsec_args, src)
        if convert:
            # We need the filelist to fix the file location paths
            j_files = utils.find_files(src, ".java")
            crep_fname = utils.get_report_file(
                "class", reports_dir, convert, ext_name="sarif"
            )
            convertLib.convert_file(
                "class", findsec_args[1:], src, report_fname, crep_fname, j_files,
            )


def nodejs_scan(src, reports_dir, convert):
    """
    Method to initiate scan of the node.js codebase

    Args:
      src Project dir
      reports_dir Directory for output reports
      convert Boolean to enable normalisation of reports json
    """
    sec_scan(src, reports_dir, convert)


def sec_scan(src, reports_dir, convert):
    """
    Method to initiate Nodejs sec scan of the node.js codebase

    Args:
      src Project dir
      reports_dir Directory for output reports
      convert Boolean to enable normalisation of reports json
    """
    convert_args = []
    report_fname = utils.get_report_file("source", reports_dir, convert)
    if reports_dir or convert:
        convert_args = [
            "--output",
            report_fname,
        ]
    sec_cmd = "nodejsscan"
    sec_args = [sec_cmd, *convert_args, "-d", src]
    exec_tool(sec_args, src)
    if convert:
        crep_fname = utils.get_report_file(
            "source", reports_dir, convert, ext_name="sarif"
        )
        convertLib.convert_file(
            "source", sec_args[1:], src, report_fname, crep_fname,
        )


def bomgen(src, reports_dir, convert):
    """
    Method to generate cyclonedx bom file using cdxgen

    Args:
      src Project dir
      reports_dir Directory for output reports
      convert Boolean to enable normalisation of reports json
    """
    report_fname = utils.get_report_file("bom", reports_dir, convert, ext_name="xml")
    bom_args = ["cdxgen", "-o", report_fname, src]
    exec_tool(bom_args, src)


def main():
    args = build_args()
    src_dir = args.src_dir
    if not args.src_dir:
        src_dir = os.getcwd()
    type = args.scan_type
    scan_mode = args.scan_mode
    if scan_mode:
        scan_mode = scan_mode.lower()
    # Get or construct the run uuid
    run_uuid = os.environ.get("SCAN_ID", str(uuid.uuid4()))
    config.set("run_uuid", run_uuid)
    # Set the source directory as an environment variable
    config.set("SAST_SCAN_SRC_DIR", src_dir)
    repo_context = context.find_repo_details(src_dir)
    workspace = os.environ.get("WORKSPACE", None)
    if not workspace and scan_mode != "ide":
        workspace = utils.get_workspace(repo_context)
        if workspace:
            config.set("WORKSPACE", workspace)
    config.reload()

    # Identify project type
    if not type:
        # Check the local config first. If not try auto detection
        type = config.get("scan_type")
        if type:
            type = type.split(",")
        else:
            type = utils.detect_project_type(src_dir, scan_mode)
    else:
        type = type.split(",")
    print(product_logo)
    LOG.info("Scanning {} using scan plugins {}".format(src_dir, type))
    reports_dir = args.reports_dir
    if not reports_dir:
        reports_dir = os.path.join(src_dir, "reports")
    scan(type, src_dir, reports_dir, args.convert, scan_mode)
    if reports_dir:
        sarif_files = utils.find_files(reports_dir, ".sarif")
        agg_fname = None
        if scan_mode != "ide":
            agg_fname = utils.get_report_file(
                "all-" + run_uuid, reports_dir, False, ext_name="json"
            )
        report_summary, build_status = analysis.summary(sarif_files, agg_fname)
        if report_summary:
            analysis.print_summary(report_summary)
            track(
                {
                    "id": run_uuid,
                    "repo_context": repo_context,
                    "report_summary": report_summary,
                    "scan_mode": scan_mode,
                }
            )
            if not args.noerror and not scan_mode == "ide":
                sys.exit(1 if build_status == "fail" else 0)


if __name__ == "__main__":
    main()
